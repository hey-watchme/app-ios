//
//  SupabaseDataManager.swift
//  ios_watchme_v9
//
//  Created by Claude on 2025/07/25.
//

import Foundation
import SwiftUI
import Supabase

// MARK: - Supabase„Éá„Éº„ÇøÁÆ°ÁêÜ„ÇØ„É©„Çπ
// vibe_whisper_summary„ÉÜ„Éº„Éñ„É´„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó„ÉªÁÆ°ÁêÜ„Åô„ÇãË≤¨Âãô„ÇíÊåÅ„Å§
@MainActor
class SupabaseDataManager: ObservableObject {
    
    // MARK: - Published Properties
    @Published var dailyReport: DailyVibeReport?
    @Published var dailyBehaviorReport: BehaviorReport? // Êñ∞„Åó„ÅèËøΩÂä†
    @Published var dailyEmotionReport: EmotionReport?   // Êñ∞„Åó„ÅèËøΩÂä†
    @Published var weeklyReports: [DailyVibeReport] = []
    @Published var deviceMetadata: DeviceMetadata?
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    // MARK: - Private Properties
    private let supabaseURL = "https://qvtlwotzuzbavrzqhyvt.supabase.co"
    private let supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF2dGx3b3R6dXpiYXZyenFoeXZ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzODAzMzAsImV4cCI6MjA2Njk1NjMzMH0.g5rqrbxHPw1dKlaGqJ8miIl9gCXyamPajinGCauEI3k"
    
    // Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Çø„Éº
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        formatter.timeZone = TimeZone.current
        return formatter
    }()
    
    // MARK: - Initialization
    init() {
        print("üìä SupabaseDataManager initialized")
    }
    
    // MARK: - Public Methods
    
    /// ÁâπÂÆö„ÅÆÊó•‰ªò„ÅÆ„É¨„Éù„Éº„Éà„ÇíÂèñÂæó
    func fetchDailyReport(for deviceId: String, date: Date) async {
        // „Åì„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÅØfetchAllReports„Åã„ÇâÂëº„Å∞„Çå„Çã„Åì„Å®„ÇíÊÉ≥ÂÆö
        // „Ç®„É©„ÉºÊôÇ„ÅØerrorMessage„ÇíË®≠ÂÆö„Åó„ÄÅUI„Å´Âç≥Â∫ß„Å´ÂèçÊò†„Åï„Åõ„Çã
        
        let dateString = dateFormatter.string(from: date)
        print("üìÖ Fetching daily report for device: \(deviceId), date: \(dateString)")
        
        do {
            // Supabase SDK„ÅÆÊ®ôÊ∫ñ„É°„ÇΩ„ÉÉ„Éâ„Çí‰ΩøÁî®
            let reports: [DailyVibeReport] = try await supabase
                .from("vibe_whisper_summary")
                .select()
                .eq("device_id", value: deviceId)
                .eq("date", value: dateString)
                .execute()
                .value
            
            print("üìä Decoded reports count: \(reports.count)")
            
            await MainActor.run { [weak self] in
                if let report = reports.first {
                    self?.dailyReport = report
                    print("‚úÖ Daily report fetched successfully")
                    print("   Average score: \(report.averageScore)")
                    print("   Insights count: \(report.insights.count)")
                } else {
                    print("‚ö†Ô∏è No report found for the specified date")
                    self?.dailyReport = nil
                }
            }
            
        } catch {
            print("‚ùå Fetch error: \(error)")
            await MainActor.run { [weak self] in
                self?.errorMessage = "„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: \(error.localizedDescription)"
                
                // PostgrestError„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
                if let dbError = error as? PostgrestError {
                    print("   - „Ç≥„Éº„Éâ: \(dbError.code ?? "‰∏çÊòé")")
                    print("   - „É°„ÉÉ„Çª„Éº„Ç∏: \(dbError.message)")
                }
            }
        }
    }
    
    /// Êó•‰ªòÁØÑÂõ≤„Åß„É¨„Éù„Éº„Éà„ÇíÂèñÂæóÔºàÈÄ±Ê¨°Ë°®Á§∫Áî®Ôºâ
    /// - Note: ÁèæÂú®„ÅØÊú™‰ΩøÁî®„ÄÇÂ∞ÜÊù•„ÅÆÈÄ±Ê¨°„Ç∞„É©„ÉïÊ©üËÉΩÂÆüË£ÖÊôÇ„Å´‰ΩøÁî®‰∫àÂÆö
    /// - TODO: ÈÄ±Ê¨°„Ç∞„É©„ÉïÊ©üËÉΩ„ÇíÂÆüË£Ö„Åô„ÇãÈöõ„Å´„Åì„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÇíÊ¥ªÁî®
    func fetchWeeklyReports(for deviceId: String, startDate: Date, endDate: Date) async {
        isLoading = true
        errorMessage = nil
        weeklyReports = []
        
        let startDateString = dateFormatter.string(from: startDate)
        let endDateString = dateFormatter.string(from: endDate)
        
        print("üìÖ Fetching weekly reports for device: \(deviceId)")
        print("   From: \(startDateString) To: \(endDateString)")
        
        do {
            // Supabase SDK„ÅÆÊ®ôÊ∫ñ„É°„ÇΩ„ÉÉ„Éâ„Çí‰ΩøÁî®
            let reports: [DailyVibeReport] = try await supabase
                .from("vibe_whisper_summary")
                .select()
                .eq("device_id", value: deviceId)
                .gte("date", value: startDateString)
                .lte("date", value: endDateString)
                .order("date", ascending: true)
                .execute()
                .value
            
            self.weeklyReports = reports
            
            print("‚úÖ Weekly reports fetched successfully")
            print("   Reports count: \(reports.count)")
            
        } catch {
            print("‚ùå Fetch error: \(error)")
            errorMessage = "„Ç®„É©„Éº: \(error.localizedDescription)"
            
            // PostgrestError„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
            if let dbError = error as? PostgrestError {
                print("   - „Ç≥„Éº„Éâ: \(dbError.code ?? "‰∏çÊòé")")
                print("   - „É°„ÉÉ„Çª„Éº„Ç∏: \(dbError.message)")
            }
        }
        
        isLoading = false
    }
    
    /// „Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢
    func clearData() {
        dailyReport = nil
        dailyBehaviorReport = nil
        dailyEmotionReport = nil
        weeklyReports = []
        deviceMetadata = nil
        errorMessage = nil
    }
    
    /// Áµ±Âêà„Éá„Éº„Çø„Éï„Çß„ÉÉ„ÉÅ„É°„ÇΩ„ÉÉ„Éâ - „Åô„Åπ„Å¶„ÅÆ„Ç∞„É©„Éï„Éá„Éº„Çø„Çí‰∏ÄÊã¨„ÅßÂèñÂæó
    func fetchAllReports(deviceId: String, date: Date) async {
        await MainActor.run { [weak self] in
            self?.isLoading = true
            self?.errorMessage = nil
        }
        
        let dateString = dateFormatter.string(from: date)
        print("üîÑ Fetching all reports for device: \(deviceId), date: \(dateString)")
        
        // ‰∏¶Ë°å„Åó„Å¶„Åô„Åπ„Å¶„ÅÆ„É¨„Éù„Éº„Éà„ÇíÂèñÂæó
        await withTaskGroup(of: Void.self) { group in
            // Vibe„É¨„Éù„Éº„Éà„ÅÆÂèñÂæó
            group.addTask { [weak self] in
                await self?.fetchDailyReport(for: deviceId, date: date)
            }
            
            // Ë°åÂãï„É¨„Éù„Éº„Éà„ÅÆÂèñÂæó
            group.addTask { [weak self] in
                let report = await self?.fetchBehaviorReport(deviceId: deviceId, date: dateString)
                await MainActor.run { [weak self] in
                    self?.dailyBehaviorReport = report
                }
            }
            
            // ÊÑüÊÉÖ„É¨„Éù„Éº„Éà„ÅÆÂèñÂæó
            group.addTask { [weak self] in
                let report = await self?.fetchEmotionReport(deviceId: deviceId, date: dateString)
                await MainActor.run { [weak self] in
                    self?.dailyEmotionReport = report
                }
            }
            
            // „Éá„Éê„Ç§„Çπ„É°„Çø„Éá„Éº„Çø„ÅÆÂèñÂæó
            group.addTask { [weak self] in
                await self?.fetchDeviceMetadata(for: deviceId)
            }
        }
        
        await MainActor.run { [weak self] in
            self?.isLoading = false
            print("‚úÖ All reports fetching completed")
        }
    }
    
    // MARK: - Behavior Report Methods
    
    /// ÁâπÂÆö„ÅÆÊó•‰ªò„ÅÆË°åÂãï„É¨„Éù„Éº„Éà„ÇíÂèñÂæó
    func fetchBehaviorReport(deviceId: String, date: String) async -> BehaviorReport? {
        print("üìä Fetching behavior report for device: \(deviceId), date: \(date)")
        
        do {
            // Supabase SDK„ÅÆÊ®ôÊ∫ñ„É°„ÇΩ„ÉÉ„Éâ„Çí‰ΩøÁî®
            let reports: [BehaviorReport] = try await supabase
                .from("behavior_summary")
                .select()
                .eq("device_id", value: deviceId)
                .eq("date", value: date)
                .execute()
                .value
            
            if let report = reports.first {
                print("‚úÖ Behavior report fetched successfully")
                print("   Total events: \(report.totalEventCount)")
                print("   Active time blocks: \(report.activeTimeBlocks.count)")
                return report
            } else {
                print("‚ö†Ô∏è No behavior report found for the specified date")
                return nil
            }
            
        } catch {
            print("‚ùå Behavior fetch error: \(error)")
            await MainActor.run { [weak self] in
                self?.errorMessage = "Ë°åÂãï„Éá„Éº„Çø„ÅÆÂèñÂæó„Ç®„É©„Éº: \(error.localizedDescription)"
                
                // PostgrestError„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
                if let dbError = error as? PostgrestError {
                    print("   - „Ç≥„Éº„Éâ: \(dbError.code ?? "‰∏çÊòé")")
                    print("   - „É°„ÉÉ„Çª„Éº„Ç∏: \(dbError.message)")
                }
            }
            return nil
        }
    }
    
    // MARK: - Emotion Report Methods
    
    /// ÁâπÂÆö„ÅÆÊó•‰ªò„ÅÆÊÑüÊÉÖ„É¨„Éù„Éº„Éà„ÇíÂèñÂæó
    func fetchEmotionReport(deviceId: String, date: String) async -> EmotionReport? {
        print("üé≠ Fetching emotion report for device: \(deviceId), date: \(date)")
        
        do {
            // Supabase SDK„ÅÆÊ®ôÊ∫ñ„É°„ÇΩ„ÉÉ„Éâ„Çí‰ΩøÁî®
            let reports: [EmotionReport] = try await supabase
                .from("emotion_opensmile_summary")
                .select()
                .eq("device_id", value: deviceId)
                .eq("date", value: date)
                .execute()
                .value
            
            if let report = reports.first {
                print("‚úÖ Emotion report fetched successfully")
                print("   Emotion graph points: \(report.emotionGraph.count)")
                print("   Active time points: \(report.activeTimePoints.count)")
                return report
            } else {
                print("‚ö†Ô∏è No emotion report found for the specified date")
                return nil
            }
            
        } catch {
            print("‚ùå Emotion fetch error: \(error)")
            await MainActor.run { [weak self] in
                self?.errorMessage = "ÊÑüÊÉÖ„Éá„Éº„Çø„ÅÆÂèñÂæó„Ç®„É©„Éº: \(error.localizedDescription)"
                
                // PostgrestError„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
                if let dbError = error as? PostgrestError {
                    print("   - „Ç≥„Éº„Éâ: \(dbError.code ?? "‰∏çÊòé")")
                    print("   - „É°„ÉÉ„Çª„Éº„Ç∏: \(dbError.message)")
                }
            }
            return nil
        }
    }
    
    /// „Éá„Éê„Ç§„Çπ„É°„Çø„Éá„Éº„Çø„ÇíÂèñÂæó
    func fetchDeviceMetadata(for deviceId: String) async {
        print("üë§ Fetching device metadata for device: \(deviceId)")
        
        do {
            // Supabase SDK„ÅÆÊ®ôÊ∫ñ„É°„ÇΩ„ÉÉ„Éâ„Çí‰ΩøÁî®
            let metadataArray: [DeviceMetadata] = try await supabase
                .from("device_metadata")
                .select()
                .eq("device_id", value: deviceId)
                .execute()
                .value
            
            // MainActor„Åß@Published„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÊõ¥Êñ∞
            await MainActor.run { [weak self] in
                self?.deviceMetadata = metadataArray.first
                if let metadata = metadataArray.first {
                    print("‚úÖ Device metadata fetched successfully")
                    print("   Name: \(metadata.name ?? "N/A")")
                    print("   Age: \(metadata.age ?? 0)")
                    print("   Gender: \(metadata.gender ?? "N/A")")
                } else {
                    print("‚ÑπÔ∏è No device metadata found")
                }
            }
            
        } catch {
            print("‚ùå Device metadata fetch error: \(error)")
            // PostgrestError„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
            if let dbError = error as? PostgrestError {
                print("   - „Ç≥„Éº„Éâ: \(dbError.code ?? "‰∏çÊòé")")
                print("   - „É°„ÉÉ„Çª„Éº„Ç∏: \(dbError.message)")
            }
        }
    }
    
    // MARK: - Avatar Methods
    
    /// „É¶„Éº„Ç∂„Éº„ÅÆ„Ç¢„Éê„Çø„ÉºÁîªÂÉè„ÅÆÁΩ≤Âêç‰ªò„ÅçURL„ÇíÂèñÂæó„Åô„Çã
    /// - Parameter userId: ÂèñÂæóÂØæË±°„ÅÆ„É¶„Éº„Ç∂„ÉºID
    /// - Returns: 1ÊôÇÈñìÊúâÂäπ„Å™„Ç¢„Éê„Çø„ÉºÁîªÂÉè„ÅÆURL„ÄÇÂ≠òÂú®„Åó„Å™„ÅÑ„ÄÅ„Åæ„Åü„ÅØ„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØnil„ÄÇ
    func fetchAvatarUrl(for userId: String) async -> URL? {
        print("üë§ Fetching avatar URL for user: \(userId)")
        
        // 1. „Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÊßãÁØâ
        let path = "\(userId)/avatar.webp"
        
        do {
            // 2. „Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®„ÇíÁ¢∫Ë™ç (‰ªªÊÑè„Å†„ÅåÊé®Â•®)
            //    WebÂÅ¥„ÅÆÂÆüË£Ö„Å´Âêà„Çè„Åõ„Å¶„ÄÅlist„ÅßÂ≠òÂú®Á¢∫Ë™ç„ÇíË°å„ÅÜ
            let files = try await supabase.storage
                .from("avatars")
                .list(path: userId, options: SearchOptions(limit: 1, search: "avatar.webp"))
            
            // „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çâ„Å™„Åë„Çå„Å∞„ÄÅURL„ÅØÂ≠òÂú®„Åó„Å™„ÅÑ„ÅÆ„Åßnil„ÇíËøî„Åô
            guard !files.isEmpty else {
                print("ü§∑‚Äç‚ôÇÔ∏è Avatar file not found at path: \(path)")
                return nil
            }
            print("‚úÖ Avatar file found. Proceeding to get signed URL.")
            
            // 3. ÁΩ≤Âêç‰ªò„ÅçURL„ÇíÁîüÊàê (WebÂÅ¥„Å®Âêå„Åò„Åè1ÊôÇÈñìÊúâÂäπ)
            let signedURL = try await supabase.storage
                .from("avatars")
                .createSignedURL(path: path, expiresIn: 3600)
            
            print("üîó Successfully created signed URL: \(signedURL)")
            return signedURL
            
        } catch {
            // „Ç®„É©„Éº„É≠„Ç∞„ÇíÂá∫Âäõ
            print("‚ùå Failed to fetch avatar URL: \(error.localizedDescription)")
            
            // „Ç®„É©„ÉºÂÜÖÂÆπ„ÇíUI„Å´Ë°®Á§∫„Åó„Åü„ÅÑÂ†¥Âêà„ÅØ„ÄÅ„Åì„Åì„ÅßerrorMessage„ÇíÊõ¥Êñ∞„Åó„Å¶„ÇÇËâØ„ÅÑ
            // await MainActor.run {
            //     self.errorMessage = "„Ç¢„Éê„Çø„Éº„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ"
            // }
            
            return nil
        }
    }
}
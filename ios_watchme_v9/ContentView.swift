//
//  ContentView.swift
//  ios_watchme_v9
//
//  Created by Kaya Matsumoto on 2025/06/11.
//

import SwiftUI
import Combine

struct ContentView: View {
    @EnvironmentObject var authManager: SupabaseAuthManager
    @EnvironmentObject var deviceManager: DeviceManager
    @StateObject private var audioRecorder = AudioRecorder()
    @State private var showAlert = false
    @State private var alertMessage = ""
    @State private var selectedRecording: RecordingModel?
    @State private var showUserIDChangeAlert = false
    @State private var newUserID = ""
    @State private var showLogoutConfirmation = false
    @State private var networkManager: NetworkManager?
    
    private func initializeNetworkManager() {
        // NetworkManager„ÇíÂàùÊúüÂåñÔºàAuthManager„Å®DeviceManager„ÇíÊ∏°„ÅôÔºâ
        networkManager = NetworkManager(authManager: authManager, deviceManager: deviceManager)
        
        if let authUser = authManager.currentUser {
            networkManager?.updateToAuthenticatedUserID(authUser.id)
        }
        
        print("üîß NetworkManagerÂàùÊúüÂåñÂÆå‰∫Ü")
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                // „Çø„Ç§„Éà„É´
                Text("WatchMe")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                    .foregroundColor(.primary)
                
                // Êé•Á∂ö„Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫
                HStack {
                    Circle()
                        .fill(statusColor)
                        .frame(width: 12, height: 12)
                    
                    Text(statusText)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                
                // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈÄ≤ÊçóË°®Á§∫
                if networkManager?.connectionStatus == .uploading {
                    VStack(spacing: 8) {
                        HStack {
                            Text("üì§ „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...")
                                .font(.subheadline)
                                .fontWeight(.medium)
                            
                            Spacer()
                            
                            Text("\(Int((networkManager?.uploadProgress ?? 0.0) * 100))%")
                                .font(.caption)
                                .fontWeight(.bold)
                        }
                        
                        ProgressView(value: networkManager?.uploadProgress ?? 0.0, total: 1.0)
                            .progressViewStyle(LinearProgressViewStyle(tint: .blue))
                        
                        if let fileName = networkManager?.currentUploadingFile {
                            Text("„Éï„Ç°„Ç§„É´: \(fileName)")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    }
                    .padding()
                    .background(Color.blue.opacity(0.1))
                    .cornerRadius(12)
                }
                
                // „Çµ„Éº„Éê„ÉºURL & „É¶„Éº„Ç∂„ÉºIDË°®Á§∫
                VStack(spacing: 12) {
                    // „Çµ„Éº„Éê„ÉºURL
                    VStack(alignment: .leading, spacing: 8) {
                        Text("„Çµ„Éº„Éê„ÉºURL:")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Text(networkManager?.serverURL ?? "„Çµ„Éº„Éê„ÉºURLÊú™Ë®≠ÂÆö")
                            .font(.footnote)
                            .padding(.horizontal, 12)
                            .padding(.vertical, 8)
                            .background(Color(.systemGray6))
                            .cornerRadius(8)
                    }
                    
                    // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±
                    VStack(alignment: .leading, spacing: 8) {
                        HStack {
                            Text("„É≠„Ç∞„Ç§„É≥„É¶„Éº„Ç∂„Éº:")
                                .font(.caption)
                                .foregroundColor(.secondary)
                            
                            Spacer()
                            
                            Button("„É≠„Ç∞„Ç¢„Ç¶„Éà") {
                                showLogoutConfirmation = true
                            }
                            .font(.caption)
                            .foregroundColor(.red)
                        }
                        
                        VStack(alignment: .leading, spacing: 4) {
                            if let user = authManager.currentUser {
                                Text("üìß \(user.email)")
                                    .font(.footnote)
                                    .fontWeight(.medium)
                                
                                Text("üÜî \(user.id)")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                    .lineLimit(1)
                                
                                // „Éá„Éê„Ç§„ÇπÁôªÈå≤Áä∂ÊÖãË°®Á§∫
                                if deviceManager.isDeviceRegistered {
                                    if let deviceInfo = deviceManager.getDeviceInfo() {
                                        Text("üì± „Éá„Éê„Ç§„Çπ: \(deviceInfo.deviceID.prefix(8))...")
                                            .font(.caption)
                                            .foregroundColor(.green)
                                    }
                                } else {
                                    Text("üì± „Éá„Éê„Ç§„Çπ: Êú™ÁôªÈå≤")
                                        .font(.caption)
                                        .foregroundColor(.orange)
                                }
                                
                                // „Éá„Éê„Ç§„ÇπÁôªÈå≤„Ç®„É©„ÉºË°®Á§∫
                                if let error = deviceManager.registrationError {
                                    Text("‚ùå \(error)")
                                        .font(.caption)
                                        .foregroundColor(.red)
                                        .lineLimit(2)
                                }
                            }
                        }
                        .padding(.horizontal, 12)
                        .padding(.vertical, 8)
                        .background(Color.green.opacity(0.1))
                        .cornerRadius(8)
                    }
                }
                
                // Èå≤Èü≥„Ç≥„É≥„Éà„É≠„Éº„É´
                VStack(spacing: 16) {
                    if audioRecorder.isRecording {
                        // Èå≤Èü≥‰∏≠„ÅÆË°®Á§∫
                        VStack(spacing: 8) {
                            Text("üî¥ Èå≤Èü≥‰∏≠...")
                                .font(.headline)
                                .foregroundColor(.red)
                            
                            Text(audioRecorder.formatTime(audioRecorder.recordingTime))
                                .font(.title2)
                                .fontWeight(.bold)
                                .foregroundColor(.red)
                            
                            Text(audioRecorder.getCurrentSlotInfo())
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        .padding()
                        .background(Color.red.opacity(0.1))
                        .cornerRadius(12)
                        
                        // Èå≤Èü≥ÂÅúÊ≠¢„Éú„Çø„É≥
                        Button(action: {
                            audioRecorder.stopRecording()
                            // Èå≤Èü≥ÂÅúÊ≠¢Âæå„ÄÅÂ∞ë„ÅóÂæÖ„Å£„Å¶„Åã„ÇâËá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
                            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                                autoUploadAllPendingRecordings()
                            }
                        }) {
                            HStack {
                                Image(systemName: "stop.fill")
                                Text("Èå≤Èü≥ÂÅúÊ≠¢")
                            }
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.red)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                        }
                    } else {
                        // Èå≤Èü≥ÈñãÂßã„Éú„Çø„É≥
                        VStack(spacing: 8) {
                            Button(action: audioRecorder.startRecording) {
                                HStack {
                                    Image(systemName: "mic.fill")
                                    Text("Èå≤Èü≥ÈñãÂßã")
                                }
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(Color.blue)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                            }
                            
                            Text(audioRecorder.getCurrentSlotInfo())
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    }
                }
                
                // Èå≤Èü≥Áµ±Ë®àÊÉÖÂ†±
                if !audioRecorder.recordings.isEmpty {
                    VStack(spacing: 8) {
                        // Áµ±Ë®àÊÉÖÂ†±
                        HStack {
                            VStack(alignment: .leading, spacing: 4) {
                                Text("Á∑èÈå≤Èü≥Êï∞")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("\(audioRecorder.recordings.count)")
                                    .font(.title2)
                                    .fontWeight(.bold)
                            }
                            
                            Spacer()
                            
                            VStack(alignment: .center, spacing: 4) {
                                Text("„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊ∏à„Åø")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("\(audioRecorder.recordings.filter { $0.isUploaded }.count)")
                                    .font(.title2)
                                    .fontWeight(.bold)
                                    .foregroundColor(.green)
                            }
                            
                            Spacer()
                            
                            VStack(alignment: .trailing, spacing: 4) {
                                Text("„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂæÖ„Å°")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("\(audioRecorder.recordings.filter { !$0.isUploaded }.count)")
                                    .font(.title2)
                                    .fontWeight(.bold)
                                    .foregroundColor(.orange)
                            }
                        }
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(12)
                    }
                    
                    // Èå≤Èü≥‰∏ÄË¶ß
                    VStack(alignment: .leading, spacing: 8) {
                        HStack {
                            Text("Èå≤Èü≥„Éï„Ç°„Ç§„É´‰∏ÄË¶ß")
                                .font(.headline)
                            
                            Spacer()
                            
                            // ‰∏ÄÊã¨„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éú„Çø„É≥
                            if audioRecorder.recordings.filter({ !$0.isUploaded && $0.canUpload }).count > 0 {
                                Button(action: {
                                    autoUploadAllPendingRecordings()
                                }) {
                                    HStack {
                                        Image(systemName: "icloud.and.arrow.up")
                                        Text("‰∏ÄÊã¨„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ")
                                    }
                                    .font(.caption)
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 6)
                                    .background(Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(8)
                                }
                                .disabled(networkManager?.connectionStatus == .uploading)
                            }
                        }
                        .padding(.horizontal)
                        
                        VStack(spacing: 8) {
                            // Âè§„ÅÑ„Éï„Ç°„Ç§„É´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Éú„Çø„É≥
                            if audioRecorder.recordings.contains(where: { $0.fileName.hasPrefix("recording_") }) {
                                Button(action: {
                                    audioRecorder.cleanupOldFiles()
                                    alertMessage = "Âè§„ÅÑÂΩ¢Âºè„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü"
                                    showAlert = true
                                }) {
                                    HStack {
                                        Image(systemName: "trash.fill")
                                        Text("Âè§„ÅÑ„Éï„Ç°„Ç§„É´„Çí‰∏ÄÊã¨ÂâäÈô§")
                                    }
                                    .font(.caption)
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 6)
                                    .background(Color.orange)
                                    .foregroundColor(.white)
                                    .cornerRadius(8)
                                }
                            }
                            
                            ScrollView {
                                LazyVStack(spacing: 8) {
                                    ForEach(audioRecorder.recordings, id: \.fileName) { recording in
                                        RecordingRowView(
                                            recording: recording,
                                            isSelected: selectedRecording?.fileName == recording.fileName,
                                            networkManager: networkManager,
                                            onSelect: { selectedRecording = recording }
                                        ) { recording in
                                            audioRecorder.deleteRecording(recording)
                                        }
                                    }
                                }
                                .padding(.horizontal)
                            }
                        }
                        .frame(maxHeight: 300)
                    }
                } else {
                    Text("Èå≤Èü≥„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                        .padding()
                }
                
                Spacer(minLength: 50)
                }
                .padding()
            }
            .navigationTitle("Èå≤Èü≥„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ")
            .navigationBarTitleDisplayMode(.inline)
        }
        .onAppear {
            initializeNetworkManager()
            // „É¶„Éº„Ç∂„Éº„ÅÆÁ¢∫Ë™çÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            authManager.fetchUserInfo()
        }
        .alert("ÁµêÊûú", isPresented: $showAlert) {
            Button("OK") { }
        } message: {
            Text(alertMessage)
        }
        .alert("„É¶„Éº„Ç∂„ÉºIDÂ§âÊõ¥", isPresented: $showUserIDChangeAlert) {
            TextField("Êñ∞„Åó„ÅÑ„É¶„Éº„Ç∂„ÉºID", text: $newUserID)
            Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) { 
                newUserID = ""
            }
            Button("Â§âÊõ¥") {
                if !newUserID.isEmpty {
                    networkManager?.setUserID(newUserID)
                    alertMessage = "„É¶„Éº„Ç∂„ÉºID„Çí„Äå\(newUserID)„Äç„Å´Â§âÊõ¥„Åó„Åæ„Åó„Åü"
                    showAlert = true
                    newUserID = ""
                }
            }
        } message: {
            Text("Êñ∞„Åó„ÅÑ„É¶„Éº„Ç∂„ÉºID„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ\nÔºà‰æã: user123, test_userÔºâ")
        }
        .alert("„É≠„Ç∞„Ç¢„Ç¶„ÉàÁ¢∫Ë™ç", isPresented: $showLogoutConfirmation) {
            Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) { }
            Button("„É≠„Ç∞„Ç¢„Ç¶„Éà", role: .destructive) {
                authManager.signOut()
                networkManager?.resetToFallbackUserID()
                alertMessage = "„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü"
                showAlert = true
            }
        } message: {
            Text("Êú¨ÂΩì„Å´„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åô„ÅãÔºü")
        }
        .onChange(of: networkManager?.connectionStatus) { oldValue, newValue in
            // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫ÜÊôÇ„ÅÆÈÄöÁü•
            if newValue == .connected && networkManager?.currentUploadingFile != nil {
                alertMessage = "„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ"
                showAlert = true
            } else if newValue == .failed && networkManager?.currentUploadingFile != nil {
                alertMessage = "„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÊâãÂãï„Åß„É™„Éà„É©„Ç§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
                showAlert = true
            }
        }
    }
    
    // ÊúÄÊñ∞„ÅÆÈå≤Èü≥„ÇíËá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàÊîπÂñÑÁâàÔºâ
    private func autoUploadLatestRecording() {
        // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Å™ÊúÄÊñ∞„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
        let uploadableRecordings = audioRecorder.recordings.filter { $0.canUpload }
        guard let latestRecording = uploadableRecordings.max(by: { $0.date < $1.date }) else {
            print("ü§ñ Ëá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ: „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Å™„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
            return
        }
        
        print("ü§ñ Ëá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã: \(latestRecording.fileName) („Çµ„Ç§„Ç∫: \(latestRecording.fileSizeFormatted))")
        networkManager?.uploadRecording(latestRecording)
    }
    
    // „Åô„Åπ„Å¶„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Éï„Ç°„Ç§„É´„ÇíÈ†ÜÊ¨°Ëá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàÊîπÂñÑÁâàÔºâ
    private func autoUploadAllPendingRecordings() {
        // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Å™„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
        let uploadableRecordings = audioRecorder.recordings.filter { $0.canUpload }
        
        guard !uploadableRecordings.isEmpty else {
            print("ü§ñ Ëá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ: „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Å™„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
            
            // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏çÂèØËÉΩ„Å™„Éï„Ç°„Ç§„É´„ÅÆÁêÜÁî±„ÇíË°®Á§∫
            let failedRecordings = audioRecorder.recordings.filter { !$0.isUploaded }
            if !failedRecordings.isEmpty {
                print("üìÑ „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏çÂèØËÉΩ„Å™„Éï„Ç°„Ç§„É´: \(failedRecordings.count)ÂÄã")
                for recording in failedRecordings {
                    let reason = !recording.fileExists() ? "„Éï„Ç°„Ç§„É´‰∏çÂ≠òÂú®" : 
                                recording.uploadAttempts >= 3 ? "ÊúÄÂ§ßË©¶Ë°åÂõûÊï∞Ë∂ÖÈÅé" : "‰∏çÊòé"
                    print("   - \(recording.fileName): \(reason) (Ë©¶Ë°å: \(recording.uploadAttempts)/3)")
                }
            }
            return
        }
        
        // ‰ΩúÊàêÊó•ÊôÇÈ†ÜÔºàÂè§„ÅÑÈ†ÜÔºâ„Åß„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
        let sortedRecordings = uploadableRecordings.sorted { $0.date < $1.date }
        
        print("ü§ñ Ëá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã: \(sortedRecordings.count)ÂÄã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÈ†ÜÊ¨°Âá¶ÁêÜ")
        for (index, recording) in sortedRecordings.enumerated() {
            print("   \(index + 1). \(recording.fileName) („Çµ„Ç§„Ç∫: \(recording.fileSizeFormatted), Ë©¶Ë°å: \(recording.uploadAttempts))")
        }
        
        // ÊúÄÂàù„ÅÆ„Éï„Ç°„Ç§„É´„Åã„Çâ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã
        processNextUpload(from: sortedRecordings, currentIndex: 0)
    }
    
    // È†ÜÊ¨°„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ
    private func processNextUpload(from recordings: [RecordingModel], currentIndex: Int) {
        guard currentIndex < recordings.count else {
            print("üéâ Ëá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü: ÂÖ®„Å¶„ÅÆ„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü")
            return
        }
        
        let currentRecording = recordings[currentIndex]
        print("ü§ñ Ëá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈÄ≤Ë°å‰∏≠: [\(currentIndex + 1)/\(recordings.count)] \(currentRecording.fileName)")
        
        // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã
        networkManager?.uploadRecording(currentRecording)
        
        // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁµêÊûú„ÇíÁõ£Ë¶ñÔºàConnectionStatus„ÅÆÂ§âÂåñ„ÇíÂæÖ„Å§Ôºâ
        var observer: AnyCancellable?
        observer = networkManager?.$connectionStatus
            .sink { status in
                
                switch status {
                case .connected:
                    // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊàêÂäü
                    if networkManager?.currentUploadingFile == currentRecording.fileName {
                        print("‚úÖ Ëá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊàêÂäü: \(currentRecording.fileName)")
                        print("üìã „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁä∂ÊÖã„ÅåÊ∞∏Á∂öÂåñ„Åï„Çå„Åæ„Åó„Åü")
                        
                        // „Éï„Ç°„Ç§„É´„ÅØ‰øùÊåÅ„Åó„ÄÅ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁä∂ÊÖã„ÅÆ„ÅøÊõ¥Êñ∞ÔºàÊó¢„Å´RecordingModelÂÅ¥„ÅßÂÆüÊñΩÊ∏à„ÅøÔºâ
                        
                        // Ê¨°„ÅÆ„Éï„Ç°„Ç§„É´„Å∏
                        observer?.cancel()
                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                            self.processNextUpload(from: recordings, currentIndex: currentIndex + 1)
                        }
                    }
                    
                case .failed:
                    // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂ§±Êïó
                    if networkManager?.currentUploadingFile == currentRecording.fileName {
                        print("‚ùå Ëá™Âãï„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂ§±Êïó: \(currentRecording.fileName) - „Éï„Ç°„Ç§„É´„Çí‰øùÊåÅÔºàÊâãÂãï„É™„Éà„É©„Ç§Áî®Ôºâ")
                        
                        // Ê¨°„ÅÆ„Éï„Ç°„Ç§„É´„Å∏ÔºàÂ§±Êïó„Åó„Åü„Éï„Ç°„Ç§„É´„ÅØ‰øùÊåÅÔºâ
                        observer?.cancel()
                        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                            self.processNextUpload(from: recordings, currentIndex: currentIndex + 1)
                        }
                    }
                    
                default:
                    break
                }
            }
    }
    
    // Êé•Á∂ö„Çπ„ÉÜ„Éº„Çø„Çπ„Å´Âøú„Åò„ÅüËâ≤
    private var statusColor: Color {
        switch networkManager?.connectionStatus ?? .unknown {
        case .unknown:
            return .gray
        case .connected:
            return .green
        case .disconnected:
            return .red
        case .uploading:
            return .orange
        case .failed:
            return .red
        }
    }
    
    // Êé•Á∂ö„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆ„ÉÜ„Ç≠„Çπ„Éà
    private var statusText: String {
        switch networkManager?.connectionStatus ?? .unknown {
        case .unknown:
            return "Áä∂ÊÖã‰∏çÊòé"
        case .connected:
            return "Êé•Á∂öÊ∏à„Åø"
        case .disconnected:
            return "ÂàáÊñ≠‰∏≠"
        case .uploading:
            return "„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠..."
        case .failed:
            return "„Ç®„É©„Éº"
        }
    }
}

// MARK: - Èå≤Èü≥„Éï„Ç°„Ç§„É´Ë°å„ÅÆ„Éì„É•„Éº
struct RecordingRowView: View {
    let recording: RecordingModel
    let isSelected: Bool
    let networkManager: NetworkManager?
    let onSelect: () -> Void
    let onDelete: (RecordingModel) -> Void
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                HStack {
                    Text(recording.fileName)
                        .font(.subheadline)
                        .fontWeight(.medium)
                    
                    Spacer()
                    
                    Text(recording.fileSizeFormatted)
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                Text(DateFormatter.display.string(from: recording.date))
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                HStack {
                    // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁä∂ÊÖã
                    Text("„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ: \(recording.isUploaded ? "‚úÖ" : "‚ùå")")
                        .font(.caption)
                        .foregroundColor(recording.isUploaded ? .green : .red)
                    
                    if !recording.isUploaded {
                        // Ë©¶Ë°åÂõûÊï∞Ë°®Á§∫
                        if recording.uploadAttempts > 0 {
                            Text("Ë©¶Ë°å: \(recording.uploadAttempts)/3")
                                .font(.caption)
                                .foregroundColor(.orange)
                        }
                        
                        // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„ÉÅ„Çß„ÉÉ„ÇØ
                        if !recording.canUpload {
                            Text("„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏çÂèØ")
                                .font(.caption)
                                .foregroundColor(.red)
                        }
                    }
                    
                    Spacer()
                }
                
                // „Ç®„É©„ÉºÊÉÖÂ†±Ë°®Á§∫
                if let error = recording.lastUploadError {
                    Text("„Ç®„É©„Éº: \(error)")
                        .font(.caption)
                        .foregroundColor(.red)
                        .lineLimit(2)
                }
            }
            
            Spacer()
            
            HStack(spacing: 8) {
                // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éú„Çø„É≥ÔºàÊâãÂãï„É™„Éà„É©„Ç§Áî®Ôºâ
                if recording.canUpload {
                    Button(action: {
                        onSelect()
                        print("üì§ ÊâãÂãï„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã: \(recording.fileName)")
                        networkManager?.uploadRecording(recording)
                    }) {
                        Image(systemName: "icloud.and.arrow.up")
                            .foregroundColor(.blue)
                    }
                    .disabled(networkManager?.connectionStatus == .uploading)
                } else if !recording.isUploaded {
                    // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏çÂèØ„ÅÆÂ†¥Âêà„ÅØ„É™„Çª„ÉÉ„Éà„Éú„Çø„É≥„ÇíË°®Á§∫
                    Button(action: {
                        recording.resetUploadStatus()
                        print("üîÑ „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁä∂ÊÖã„É™„Çª„ÉÉ„Éà: \(recording.fileName)")
                    }) {
                        Image(systemName: "arrow.clockwise")
                            .foregroundColor(.orange)
                    }
                }
                
                // ÂâäÈô§„Éú„Çø„É≥
                Button(action: { onDelete(recording) }) {
                    Image(systemName: "trash")
                        .foregroundColor(.red)
                }
            }
        }
        .padding()
        .background(isSelected ? Color.blue.opacity(0.1) : Color(.systemGray6))
        .cornerRadius(8)
        .onTapGesture {
            onSelect()
        }
    }
}

// Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Çø„Éº
extension DateFormatter {
    static let display: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .medium
        formatter.locale = Locale(identifier: "ja_JP")
        return formatter
    }()
}

#Preview {
    ContentView()
}

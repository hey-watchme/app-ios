//
//  AvatarPickerView.swift
//  ios_watchme_v9
//
//  Created by Claude on 2025/07/31.
//

import SwiftUI
import PhotosUI

// MARK: - Avatar Picker View
/// ÂÖ±ÈÄö„ÅÆ„Ç¢„Éê„Çø„ÉºÈÅ∏Êäû„ÉªÁ∑®ÈõÜ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
struct AvatarPickerView: View {
    // MARK: - Properties
    let currentAvatarURL: URL?
    let onImageSelected: (UIImage) -> Void
    let onDelete: (() -> Void)?
    
    @State private var selectedItem: PhotosPickerItem?
    @State private var selectedImage: UIImage?
    @State private var showingImageCropper = false
    @State private var showingActionSheet = false
    @State private var showingCamera = false
    @State private var showingPhotoPicker = false
    @State private var isProcessing = false
    
    // MARK: - Body
    var body: some View {
        VStack(spacing: 20) {
            // ÁèæÂú®„ÅÆ„Ç¢„Éê„Çø„ÉºË°®Á§∫
            avatarDisplay
                .onTapGesture {
                    showingActionSheet = true
                }
            
            // ÈÅ∏Êäû„Éú„Çø„É≥
            Button(action: {
                showingActionSheet = true
            }) {
                Label("„Ç¢„Éê„Çø„Éº„ÇíÂ§âÊõ¥", systemImage: "camera.fill")
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(.white)
                    .padding(.horizontal, 20)
                    .padding(.vertical, 10)
                    .background(Color.blue)
                    .cornerRadius(20)
            }
        }
        .confirmationDialog("„Ç¢„Éê„Çø„Éº„ÅÆÈÅ∏Êäû", isPresented: $showingActionSheet, titleVisibility: .visible) {
            // ÂÜôÁúü„É©„Ç§„Éñ„É©„É™„Åã„ÇâÈÅ∏Êäû
            Button("ÂÜôÁúü„ÇíÈÅ∏Êäû") {
                showingPhotoPicker = true
            }
            
            // „Ç´„É°„É©„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅÆ„ÅøË°®Á§∫
            if UIImagePickerController.isSourceTypeAvailable(.camera) {
                Button("„Ç´„É°„É©„ÅßÊíÆÂΩ±") {
                    showingCamera = true
                }
            }
            
            if currentAvatarURL != nil && onDelete != nil {
                Button("„Ç¢„Éê„Çø„Éº„ÇíÂâäÈô§", role: .destructive) {
                    onDelete?()
                }
            }
            
            Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) {}
        }
        message: {
            Text("„Éó„É≠„Éï„Ç£„Éº„É´ÂÜôÁúü„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        }
        .onChange(of: selectedItem) { oldValue, newValue in
            Task {
                await loadImage(from: newValue)
            }
        }
        .sheet(isPresented: $showingImageCropper) {
            if let image = selectedImage {
                ImageCropperView(image: image) { croppedImage in
                    onImageSelected(croppedImage)
                    showingImageCropper = false
                }
            }
        }
        .sheet(isPresented: $showingCamera) {
            CameraView { image in
                DispatchQueue.main.async {
                    self.selectedImage = image
                    self.showingCamera = false
                    // Â∞ë„ÅóÈÅÖÂª∂„Åï„Åõ„Å¶„Åã„Çâ„Éà„É™„Éü„É≥„Ç∞ÁîªÈù¢„ÇíË°®Á§∫
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                        self.showingImageCropper = true
                    }
                }
            }
        }
        .photosPicker(
            isPresented: $showingPhotoPicker,
            selection: $selectedItem,
            matching: .images,
            photoLibrary: .shared()
        )
    }
    
    // MARK: - Avatar Display
    private var avatarDisplay: some View {
        ZStack {
            if let url = currentAvatarURL {
                AsyncImage(url: url) { phase in
                    switch phase {
                    case .success(let image):
                        image
                            .resizable()
                            .aspectRatio(contentMode: .fill)
                            .frame(width: 150, height: 150)
                            .clipShape(Circle())
                    case .failure(let error):
                        // „Ç®„É©„Éº„ÅÆË©≥Á¥∞„Çí„É≠„Ç∞Âá∫Âäõ
                        let _ = {
                            print("‚ùå Failed to load avatar image: \(error)")
                            print("üìç URL: \(url)")
                        }()
                        defaultAvatar
                    case .empty:
                        // Ë™≠„ÅøËæº„Åø‰∏≠
                        ZStack {
                            defaultAvatar
                            ProgressView()
                                .progressViewStyle(CircularProgressViewStyle(tint: .white))
                        }
                    @unknown default:
                        defaultAvatar
                    }
                }
            } else {
                defaultAvatar
            }
            
            // „Ç´„É°„É©„Ç¢„Ç§„Ç≥„É≥„Ç™„Éº„Éê„Éº„É¨„Ç§
            VStack {
                Spacer()
                HStack {
                    Spacer()
                    Image(systemName: "camera.fill")
                        .foregroundColor(.white)
                        .padding(8)
                        .background(Color.black.opacity(0.6))
                        .clipShape(Circle())
                }
            }
            .frame(width: 150, height: 150)
        }
    }
    
    private var defaultAvatar: some View {
        Image(systemName: "person.crop.circle.fill")
            .font(.system(size: 150))
            .foregroundColor(.gray.opacity(0.5))
    }
    
    // MARK: - Helper Methods
    private func loadImage(from item: PhotosPickerItem?) async {
        guard let item = item else { return }
        
        print("üì∏ Loading image from PhotosPickerItem")
        
        await MainActor.run {
            isProcessing = true
        }
        
        do {
            // ÁîªÂÉè„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
            if let data = try await item.loadTransferable(type: Data.self) {
                print("üìä Image data loaded: \(data.count) bytes")
                
                if let uiImage = UIImage(data: data) {
                    print("‚úÖ UIImage created successfully - Size: \(uiImage.size), Scale: \(uiImage.scale)")
                    
                    await MainActor.run {
                        self.selectedImage = uiImage
                        self.isProcessing = false
                        self.showingPhotoPicker = false
                        // Â∞ë„ÅóÈÅÖÂª∂„Åï„Åõ„Å¶„Åã„Çâ„Éà„É™„Éü„É≥„Ç∞ÁîªÈù¢„ÇíË°®Á§∫
                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                            self.showingImageCropper = true
                        }
                    }
                } else {
                    print("‚ùå Failed to create UIImage from data")
                    await MainActor.run {
                        isProcessing = false
                    }
                }
            } else {
                await MainActor.run {
                    isProcessing = false
                    print("‚ö†Ô∏è ÁîªÂÉè„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü")
                }
            }
        } catch {
            await MainActor.run {
                print("‚ùå ÁîªÂÉè„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó: \(error)")
                isProcessing = false
            }
        }
    }
}

// MARK: - Image Cropper View
/// ÁîªÂÉè„ÇíÊ≠£ÊñπÂΩ¢„Å´„Éà„É™„Éü„É≥„Ç∞„Åô„Çã„Éì„É•„Éº
struct ImageCropperView: View {
    let image: UIImage
    let onComplete: (UIImage) -> Void
    
    @State private var scale: CGFloat = 1.0
    @State private var lastScale: CGFloat = 1.0
    @State private var offset: CGSize = .zero
    @State private var lastOffset: CGSize = .zero
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            GeometryReader { geometry in
                ZStack {
                    Color.black.ignoresSafeArea()
                    
                    VStack {
                        Spacer()
                        
                        // „Éà„É™„Éü„É≥„Ç∞„Ç®„É™„Ç¢
                        ZStack {
                            // ÁîªÂÉè
                            Image(uiImage: image)
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .scaleEffect(scale)
                                .offset(offset)
                                .gesture(
                                    SimultaneousGesture(
                                        MagnificationGesture()
                                            .onChanged { value in
                                                scale = lastScale * value
                                            }
                                            .onEnded { value in
                                                lastScale = scale
                                            },
                                        DragGesture()
                                            .onChanged { value in
                                                offset = CGSize(
                                                    width: lastOffset.width + value.translation.width,
                                                    height: lastOffset.height + value.translation.height
                                                )
                                            }
                                            .onEnded { value in
                                                lastOffset = offset
                                            }
                                    )
                                )
                            
                            // „Éà„É™„Éü„É≥„Ç∞Êû†
                            Rectangle()
                                .stroke(Color.white, lineWidth: 2)
                                .frame(width: min(geometry.size.width - 40, 300),
                                       height: min(geometry.size.width - 40, 300))
                                .overlay(
                                    // „Ç∞„É™„ÉÉ„ÉâÁ∑ö
                                    GeometryReader { geo in
                                        Path { path in
                                            let width = geo.size.width
                                            let height = geo.size.height
                                            
                                            // Á∏¶Á∑ö
                                            path.move(to: CGPoint(x: width / 3, y: 0))
                                            path.addLine(to: CGPoint(x: width / 3, y: height))
                                            path.move(to: CGPoint(x: width * 2 / 3, y: 0))
                                            path.addLine(to: CGPoint(x: width * 2 / 3, y: height))
                                            
                                            // Ê®™Á∑ö
                                            path.move(to: CGPoint(x: 0, y: height / 3))
                                            path.addLine(to: CGPoint(x: width, y: height / 3))
                                            path.move(to: CGPoint(x: 0, y: height * 2 / 3))
                                            path.addLine(to: CGPoint(x: width, y: height * 2 / 3))
                                        }
                                        .stroke(Color.white.opacity(0.3), lineWidth: 0.5)
                                    }
                                )
                        }
                        .frame(width: min(geometry.size.width - 40, 300),
                               height: min(geometry.size.width - 40, 300))
                        .clipped()
                        
                        Spacer()
                    }
                }
            }
            .navigationTitle("ÁîªÂÉè„Çí„Éà„É™„Éü„É≥„Ç∞")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("„Ç≠„É£„É≥„Çª„É´") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .confirmationAction) {
                    Button("ÂÆå‰∫Ü") {
                        if let croppedImage = cropImage() {
                            onComplete(croppedImage)
                        }
                    }
                    .fontWeight(.bold)
                }
            }
        }
    }
    
    private func cropImage() -> UIImage? {
        let targetSize: CGFloat = 300
        
        // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞
        print("üñºÔ∏è Cropping image - Original size: \(image.size), Scale: \(scale), Offset: \(offset)")
        
        // ÁîªÂÉè„ÅÆÂÆüÈöõ„ÅÆ„Çµ„Ç§„Ç∫„ÇíÂèñÂæó
        let imageSize = image.size
        
        // ÁîªÂÉè„ÅåÂ∞è„Åï„Åô„Åé„ÇãÂ†¥Âêà„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
        guard imageSize.width > 0 && imageSize.height > 0 else {
            print("‚ùå Invalid image size: \(imageSize)")
            return nil
        }
        
        // „Ç¢„Çπ„Éö„ÇØ„ÉàÊØî„Çí‰øùÊåÅ„Åó„Å™„Åå„Çâ„ÄÅ300x300„ÅÆÊû†„ÇíÂÆåÂÖ®„Å´Ë¶Ü„ÅÜÊúÄÂ∞è„Çπ„Ç±„Éº„É´
        let minScale = max(targetSize / imageSize.width, targetSize / imageSize.height)
        let finalScale = max(self.scale * minScale, minScale)
        
        // „Çπ„Ç±„Éº„É´Âæå„ÅÆÁîªÂÉè„Çµ„Ç§„Ç∫
        let scaledWidth = imageSize.width * finalScale
        let scaledHeight = imageSize.height * finalScale
        
        print("üìè Scaled size: \(scaledWidth) x \(scaledHeight), Final scale: \(finalScale)")
        
        // UIGraphics„ÅßÁîªÂÉè„Çí„É¨„É≥„ÉÄ„É™„É≥„Ç∞
        let renderer = UIGraphicsImageRenderer(size: CGSize(width: targetSize, height: targetSize))
        
        let croppedImage = renderer.image { context in
            // ËÉåÊôØ„ÇíÈÄèÊòé„Å´„Åô„ÇãÔºàÁôΩ„Åß„ÅØ„Å™„ÅèÔºâ
            context.cgContext.clear(CGRect(x: 0, y: 0, width: targetSize, height: targetSize))
            
            // „ÇØ„É™„ÉÉ„Éî„É≥„Ç∞„Éû„Çπ„ÇØ„ÇíË®≠ÂÆö
            context.cgContext.addRect(CGRect(x: 0, y: 0, width: targetSize, height: targetSize))
            context.cgContext.clip()
            
            // ÁîªÂÉè„ÅÆ‰∏≠ÂøÉ„ÇíË®àÁÆó
            let centerX = targetSize / 2
            let centerY = targetSize / 2
            
            // „Ç™„Éï„Çª„ÉÉ„Éà„ÇíÈÅ©Áî®„Åó„ÅüÊèèÁîª‰ΩçÁΩÆ
            let drawX = centerX - (scaledWidth / 2) + offset.width
            let drawY = centerY - (scaledHeight / 2) + offset.height
            
            // ÁîªÂÉè„ÇíÊèèÁîª
            let drawRect = CGRect(
                x: drawX,
                y: drawY,
                width: scaledWidth,
                height: scaledHeight
            )
            
            print("üéØ Draw rect: \(drawRect)")
            
            image.draw(in: drawRect)
        }
        
        print("‚úÖ Image cropped successfully")
        return croppedImage
    }
}

// MARK: - Camera View
/// „Ç´„É°„É©ÊíÆÂΩ±Áî®„ÅÆ„Éì„É•„Éº
struct CameraView: UIViewControllerRepresentable {
    let onImageCaptured: (UIImage) -> Void
    @Environment(\.dismiss) private var dismiss
    
    func makeUIViewController(context: Context) -> UIImagePickerController {
        let picker = UIImagePickerController()
        
        // „Ç´„É°„É©„ÅåÂà©Áî®ÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        guard UIImagePickerController.isSourceTypeAvailable(.camera) else {
            print("‚ùå Camera is not available on this device")
            picker.sourceType = .photoLibrary
            picker.allowsEditing = false
            picker.delegate = context.coordinator
            return picker
        }
        
        picker.sourceType = .camera
        picker.allowsEditing = false
        picker.delegate = context.coordinator
        
        // „Ç´„É°„É©Ë®≠ÂÆö
        picker.cameraCaptureMode = .photo
        
        // Âà©Áî®ÂèØËÉΩ„Å™„Ç´„É°„É©„Éá„Éê„Ç§„Çπ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if UIImagePickerController.isCameraDeviceAvailable(.rear) {
            picker.cameraDevice = .rear
        } else if UIImagePickerController.isCameraDeviceAvailable(.front) {
            picker.cameraDevice = .front
        }
        
        // „Éï„É©„ÉÉ„Ç∑„É•„É¢„Éº„Éâ„ÅÆË®≠ÂÆö
        if UIImagePickerController.isFlashAvailable(for: picker.cameraDevice) {
            picker.cameraFlashMode = .off
        }
        
        // iPad„Åß„ÅÆ„Éù„ÉÉ„Éó„Ç™„Éº„Éê„ÉºÂØæÂøú
        picker.modalPresentationStyle = .fullScreen
        
        return picker
    }
    
    func updateUIViewController(_ uiViewController: UIImagePickerController, context: Context) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
        let parent: CameraView
        
        init(_ parent: CameraView) {
            self.parent = parent
        }
        
        func imagePickerController(_ picker: UIImagePickerController,
                                 didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
            // „É°„Ç§„É≥„Çπ„É¨„ÉÉ„Éâ„ÅßÂá¶ÁêÜ
            DispatchQueue.main.async {
                if let image = info[.originalImage] as? UIImage {
                    self.parent.onImageCaptured(image)
                }
                self.parent.dismiss()
            }
        }
        
        func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
            DispatchQueue.main.async {
                self.parent.dismiss()
            }
        }
    }
}
//
//  RecordingView.swift
//  ios_watchme_v9
//
//  Created by Claude on 2025/07/25.
//

import SwiftUI
import Combine

struct RecordingView: View {
    @ObservedObject var audioRecorder: AudioRecorder
    @ObservedObject var networkManager: NetworkManager
    @EnvironmentObject var deviceManager: DeviceManager
    @EnvironmentObject var userAccountManager: UserAccountManager
    @Environment(\.dismiss) private var dismiss
    @State private var showAlert = false
    @State private var alertMessage = ""
    @State private var selectedRecording: RecordingModel?
    @State private var uploadingTotalCount = 0
    @State private var uploadingCurrentIndex = 0
    @State private var showDeviceLinkAlert = false
    @State private var isLinkingDevice = false
    @State private var currentTimeSlot = SlotTimeUtility.getCurrentSlot()
    @State private var deviceCurrentTime = ""
    @State private var timer: Timer?
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                // Èü≥Â£∞ÂàÜÊûêË™¨Êòé„Çª„ÇØ„Ç∑„Éß„É≥
                VStack(spacing: 12) {
                    Image(systemName: "waveform.circle.fill")
                        .font(.system(size: 50))
                        .foregroundColor(Color.safeColor("PrimaryActionColor"))
                    
                    Text("Èü≥Â£∞„Åã„Çâ„ÄÅÊ∞óÂàÜ„ÉªË°åÂãï„ÉªÊÑüÊÉÖ„ÇíÂàÜÊûê„Åó„Åæ„Åô„ÄÇ")
                        .font(.subheadline)
                        .multilineTextAlignment(.center)
                        .foregroundColor(.primary)
                        .padding(.horizontal)
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(16)
                
                Divider()
                    .padding(.vertical, 8)
            
            // „Éá„Éê„Ç§„Çπ„Çø„Ç§„É†„Çæ„Éº„É≥ÊÉÖÂ†±„Å®Èå≤Èü≥ÊôÇÈñì„ÅÆË©≥Á¥∞Ë™¨Êòé
            VStack(spacing: 12) {
                // „Éá„Éê„Ç§„Çπ„Çø„Ç§„É†„Çæ„Éº„É≥ÊÉÖÂ†±
                VStack(spacing: 8) {
                    HStack(spacing: 4) {
                        Image(systemName: "globe")
                            .font(.caption)
                            .foregroundColor(.blue)
                        Text("„Éá„Éê„Ç§„Çπ„Çø„Ç§„É†„Çæ„Éº„É≥: \(deviceManager.selectedDeviceTimezone.identifier)")
                            .font(.caption)
                            .fontWeight(.medium)
                            .foregroundColor(.blue)
                    }
                    
                    // ÁèæÂú®„ÅÆ„Éá„Éê„Ç§„ÇπÊôÇÂàª
                    VStack(spacing: 4) {
                        Text("ÁèæÂú®ÊôÇÂàªÔºà„Éá„Éê„Ç§„ÇπÂü∫Ê∫ñÔºâ")
                            .font(.caption2)
                            .foregroundColor(.secondary)
                        Text(deviceCurrentTime)
                            .font(.subheadline)
                            .fontWeight(.semibold)
                            .foregroundColor(.primary)
                    }
                }
                .frame(maxWidth: .infinity)
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(Color.blue.opacity(0.1))
                .cornerRadius(8)
                
                // Èå≤Èü≥„Éá„Éº„Çø„Éù„Ç§„É≥„ÉàË™¨Êòé
                VStack(spacing: 4) {
                    HStack(spacing: 4) {
                        Image(systemName: "waveform.path")
                            .font(.caption)
                            .foregroundColor(.green)
                        Text("Èå≤Èü≥„Éá„Éº„Çø„Éù„Ç§„É≥„Éà: \(currentTimeSlot)")
                            .font(.caption)
                            .fontWeight(.medium)
                            .foregroundColor(.green)
                    }
                    Text("„Åì„ÅÆ„Çø„Ç§„É†„Çπ„É≠„ÉÉ„Éà„ÅÆ„Éá„Éº„Çø„Å®„Åó„Å¶„Ç∞„É©„Éï„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
                .frame(maxWidth: .infinity)
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(Color.green.opacity(0.1))
                .cornerRadius(8)
            }
            .padding(.horizontal)
            .padding(.vertical, 8)
            
            // Èå≤Èü≥„Ç®„É©„ÉºË°®Á§∫
            if let errorMessage = audioRecorder.recordingError {
                HStack {
                    Image(systemName: "exclamationmark.triangle.fill")
                        .foregroundColor(Color.safeColor("ErrorColor"))
                    Text(errorMessage)
                        .font(.subheadline)
                        .foregroundColor(Color.safeColor("ErrorColor"))
                    Spacer()
                    Button("Èñâ„Åò„Çã") {
                        audioRecorder.recordingError = nil
                    }
                    .font(.caption)
                }
                .padding()
                .background(Color.safeColor("ErrorColor").opacity(0.1))
                .cornerRadius(8)
                .padding(.horizontal)
            }
            
            // Èå≤Èü≥ÈñãÂßã/ÂÅúÊ≠¢„Éú„Çø„É≥
            if audioRecorder.isRecording {
                // Èå≤Èü≥ÂÅúÊ≠¢„Éú„Çø„É≥
                Button(action: {
                    audioRecorder.stopRecording()
                }) {
                    HStack {
                        Image(systemName: "stop.circle.fill")
                            .font(.title2)
                        Text("Èå≤Èü≥„ÇíÂÅúÊ≠¢")
                            .font(.headline)
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.red)
                    .foregroundColor(.white)
                    .cornerRadius(12)
                }
                .padding(.horizontal)
            } else {
                // Èå≤Èü≥ÈñãÂßã„Éú„Çø„É≥
                Button(action: {
                    // „Éá„Éê„Ç§„Çπ„ÅåÈÄ£Êê∫„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
                    if deviceManager.localDeviceIdentifier == nil {
                        showDeviceLinkAlert = true
                    } else {
                        audioRecorder.startRecording()
                    }
                }) {
                    HStack {
                        Image(systemName: "mic.circle.fill")
                            .font(.title2)
                        Text("Èå≤Èü≥„ÇíÈñãÂßã")
                            .font(.headline)
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.safeColor("RecordingActive"))
                    .foregroundColor(.white)
                    .cornerRadius(12)
                }
                .padding(.horizontal)
            }
            
            // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈÄ≤ÊçóË°®Á§∫
            if networkManager.connectionStatus == .uploading {
                VStack(spacing: 8) {
                    HStack {
                        if uploadingTotalCount > 0 {
                            Text("üì§ „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠ (\(uploadingCurrentIndex)/\(uploadingTotalCount)‰ª∂)")
                                .font(.subheadline)
                                .fontWeight(.medium)
                        } else {
                            Text("üì§ „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...")
                                .font(.subheadline)
                                .fontWeight(.medium)
                        }
                        
                        Spacer()
                        
                        Text("\(Int(networkManager.uploadProgress * 100))%")
                            .font(.caption)
                            .fontWeight(.bold)
                    }
                    
                    ProgressView(value: networkManager.uploadProgress, total: 1.0)
                        .progressViewStyle(LinearProgressViewStyle(tint: Color.safeColor("UploadActive")))
                    
                    if let fileName = networkManager.currentUploadingFile {
                        Text("„Éï„Ç°„Ç§„É´: \(fileName)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                .padding()
                .background(Color.safeColor("UploadActive").opacity(0.1))
                .cornerRadius(12)
            }
            
            // Èå≤Èü≥Áä∂ÊÖã„ÅÆË°®Á§∫„Ç®„É™„Ç¢
            if audioRecorder.isRecording {
                // Èå≤Èü≥‰∏≠„ÅÆË°®Á§∫
                VStack(spacing: 16) {
                    // Ê≥¢ÂΩ¢Ë°®Á§∫
                    HStack(spacing: 3) {
                        ForEach(0..<audioRecorder.audioLevels.count, id: \.self) { index in
                            RoundedRectangle(cornerRadius: 2)
                                .fill(Color.safeColor("RecordingActive"))
                                .frame(width: 4, height: max(4, audioRecorder.audioLevels[index] * 60))
                                .animation(.easeInOut(duration: 0.05), value: audioRecorder.audioLevels[index])
                        }
                    }
                    .frame(height: 60)
                    .padding(.horizontal)
                    
                    VStack(spacing: 8) {
                        Text("Èå≤Èü≥‰∏≠")
                            .font(.headline)
                            .foregroundColor(Color.safeColor("RecordingActive"))
                        
                        Text(audioRecorder.formatTime(audioRecorder.recordingTime))
                            .font(.title2)
                            .fontWeight(.bold)
                            .foregroundColor(Color.safeColor("RecordingActive"))
                        
                        Text(audioRecorder.getCurrentSlotInfo())
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                .padding()
                .background(Color.safeColor("RecordingActive").opacity(0.1))
                .cornerRadius(12)
            }
            
            // Èå≤Èü≥‰∏ÄË¶ßÔºà„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂ§±Êïó„Åæ„Åü„ÅØ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂæÖ„Å°„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆ„ÅøÔºâ
            if !audioRecorder.recordings.isEmpty {
                VStack(alignment: .leading, spacing: 16) {
                    Text("Èå≤Èü≥„Éï„Ç°„Ç§„É´ÔºàÊú™ÈÄÅ‰ø°Ôºâ")
                        .font(.headline)
                        .padding(.horizontal)
                    
                    VStack(spacing: 8) {
                        // Âè§„ÅÑ„Éï„Ç°„Ç§„É´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Éú„Çø„É≥
                        if audioRecorder.recordings.contains(where: { $0.fileName.hasPrefix("recording_") }) {
                            Button(action: {
                                audioRecorder.cleanupOldFiles()
                                alertMessage = "Âè§„ÅÑÂΩ¢Âºè„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü"
                                showAlert = true
                            }) {
                                HStack {
                                    Image(systemName: "trash.fill")
                                    Text("Âè§„ÅÑ„Éï„Ç°„Ç§„É´„Çí‰∏ÄÊã¨ÂâäÈô§")
                                }
                                .font(.caption)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                                .background(Color.safeColor("WarningColor"))
                                .foregroundColor(.white)
                                .cornerRadius(8)
                            }
                        }
                        
                        ScrollView {
                            LazyVStack(spacing: 8) {
                                ForEach(audioRecorder.recordings, id: \.fileName) { recording in
                                    RecordingRowView(
                                        recording: recording,
                                        isSelected: selectedRecording?.fileName == recording.fileName,
                                        onSelect: { selectedRecording = recording },
                                        onDelete: { recording in
                                            audioRecorder.deleteRecording(recording)
                                        }
                                    )
                                }
                            }
                            .padding(.horizontal)
                        }
                        .frame(maxHeight: 300)
                        
                        // ‰∏ÄÊã¨„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éú„Çø„É≥ÔºàÊúÄ‰∏ãÈÉ®„Å´Â§ß„Åç„ÅèË°®Á§∫Ôºâ
                        if audioRecorder.recordings.filter({ !$0.isRecordingFailed && !$0.isUploaded && $0.canUpload }).count > 0 {
                            Button(action: {
                                manualBatchUpload()
                            }) {
                                HStack {
                                    Image(systemName: "icloud.and.arrow.up")
                                        .font(.title3)
                                    Text("„Åô„Åπ„Å¶„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ")
                                        .font(.headline)
                                        .fontWeight(.semibold)
                                }
                                .frame(maxWidth: .infinity)
                                .padding(.vertical, 16)
                                .background(Color.safeColor("AppAccentColor"))
                                .foregroundColor(.white)
                                .cornerRadius(12)
                            }
                            .padding(.horizontal)
                            .disabled(networkManager.connectionStatus == .uploading)
                        }
                    }
                }
            } else {
                Text("Êú™ÈÄÅ‰ø°„ÅÆÈå≤Èü≥„Éï„Ç°„Ç§„É´„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .padding()
            }
                }
                .padding()
            }
            .navigationTitle("Èå≤Èü≥")
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            ToolbarItem(placement: .cancellationAction) {
                Button("Èñâ„Åò„Çã") {
                    dismiss()
                }
            }
        }
        }
        .alert("ÈÄöÁü•", isPresented: $showAlert) {
            Button("OK", role: .cancel) { }
        } message: {
            Text(alertMessage)
        }
        .alert("„Éá„Éê„Ç§„ÇπÈÄ£Êê∫„ÅåÂøÖË¶Å„Åß„Åô", isPresented: $showDeviceLinkAlert) {
            Button("„ÅØ„ÅÑ") {
                // „Éá„Éê„Ç§„ÇπÈÄ£Êê∫„ÇíÂÆüË°å
                linkDeviceAndStartRecording()
            }
            Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) { }
        } message: {
            Text("„Éá„Éê„Ç§„Çπ„ÅåÈÄ£Êê∫„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åü„ÇÅÈå≤Èü≥„Åß„Åç„Åæ„Åõ„Çì„ÄÇ\n„Åì„ÅÆ„Éá„Éê„Ç§„Çπ„ÇíÈÄ£Êê∫„Åó„Åæ„Åô„ÅãÔºü")
        }
        .overlay(
            // „Éá„Éê„Ç§„ÇπÈÄ£Êê∫‰∏≠„ÅÆË°®Á§∫
            Group {
                if isLinkingDevice {
                    ZStack {
                        Color.black.opacity(0.4)
                            .ignoresSafeArea()
                        
                        VStack(spacing: 16) {
                            ProgressView()
                                .progressViewStyle(CircularProgressViewStyle(tint: .white))
                                .scaleEffect(1.5)
                            
                            Text("„Éá„Éê„Ç§„Çπ„ÇíÈÄ£Êê∫„Åó„Å¶„ÅÑ„Åæ„Åô...")
                                .font(.headline)
                                .foregroundColor(.white)
                        }
                        .padding(40)
                        .background(Color.black.opacity(0.8))
                        .cornerRadius(20)
                    }
                }
            }
        )
        .onAppear {
            // AudioRecorder„Å´DeviceManager„ÅÆÂèÇÁÖß„ÇíË®≠ÂÆö
            audioRecorder.deviceManager = deviceManager
            
            // ÂàùÊúüÂÄ§„ÇíË®≠ÂÆö
            updateTimeInfo()
            
            // „Çø„Ç§„Éû„Éº„ÇíÈñãÂßã„Åó„Å¶ÊôÇÈñì„Çπ„É≠„ÉÉ„Éà„Å®„Éá„Éê„Ç§„ÇπÊôÇÂàª„ÇíÊõ¥Êñ∞
            timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in
                updateTimeInfo()
            }
        }
        .onDisappear {
            // „Çø„Ç§„Éû„Éº„ÇíÂÅúÊ≠¢
            timer?.invalidate()
            timer = nil
            
            // „Éì„É•„Éº„ÅåÈùûË°®Á§∫„Å´„Å™„Å£„Åü„ÇâÈå≤Èü≥„ÇíÂÅúÊ≠¢
            if audioRecorder.isRecording {
                audioRecorder.stopRecording()
            }
        }
    }
    
    // ÊôÇÂàª„Å®„Çπ„É≠„ÉÉ„ÉàÊÉÖÂ†±„ÇíÊõ¥Êñ∞
    private func updateTimeInfo() {
        // „Éá„Éê„Ç§„Çπ„ÅÆ„Çø„Ç§„É†„Çæ„Éº„É≥„ÇíËÄÉÊÖÆ„Åó„ÅüÁèæÂú®ÊôÇÂàª„ÇíÂèñÂæó
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyyÂπ¥MÊúàdÊó• HH:mm:ss"
        formatter.locale = Locale(identifier: "ja_JP")
        formatter.timeZone = deviceManager.selectedDeviceTimezone
        
        deviceCurrentTime = formatter.string(from: Date())
        // „Éá„Éê„Ç§„Çπ„ÅÆ„Çø„Ç§„É†„Çæ„Éº„É≥„Çí‰ΩøÁî®„Åó„Å¶„Çπ„É≠„ÉÉ„Éà„ÇíË®àÁÆó
        currentTimeSlot = SlotTimeUtility.getCurrentSlot(timezone: deviceManager.selectedDeviceTimezone)
    }
    
    // „Éá„Éê„Ç§„ÇπÈÄ£Êê∫Âæå„Å´Èå≤Èü≥„ÇíÈñãÂßã„Åô„Çã
    private func linkDeviceAndStartRecording() {
        guard let userId = userAccountManager.currentUser?.id else {
            alertMessage = "„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì"
            showAlert = true
            return
        }
        
        isLinkingDevice = true
        
        // „Éá„Éê„Ç§„ÇπÈÄ£Êê∫„ÇíÂÆüË°å
        deviceManager.registerDevice(userId: userId)
        
        // „Éá„Éê„Ç§„ÇπÈÄ£Êê∫„ÅÆÂÆå‰∫Ü„ÇíÁõ£Ë¶ñ
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            checkDeviceLinkingStatus()
        }
    }
    
    // „Éá„Éê„Ç§„ÇπÈÄ£Êê∫„ÅÆÁä∂ÊÖã„ÇíÂÆöÊúüÁöÑ„Å´„ÉÅ„Çß„ÉÉ„ÇØ
    private func checkDeviceLinkingStatus() {
        if deviceManager.isLoading {
            // „Åæ„Å†ÈÄ£Êê∫‰∏≠„Å™„ÅÆ„Åß„ÄÅÂÜçÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØ
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                checkDeviceLinkingStatus()
            }
        } else {
            // ÈÄ£Êê∫ÂÆå‰∫Ü
            isLinkingDevice = false
            
            if let error = deviceManager.registrationError {
                // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà
                alertMessage = "„Éá„Éê„Ç§„ÇπÈÄ£Êê∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: \(error)"
                showAlert = true
            } else if deviceManager.isDeviceRegistered {
                // ÈÄ£Êê∫ÊàêÂäü
                alertMessage = "„Éá„Éê„Ç§„ÇπÈÄ£Êê∫„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"
                showAlert = true
                
                // „É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éê„Ç§„Çπ‰∏ÄË¶ß„ÇíÂÜçÂèñÂæó
                Task {
                    if let userId = userAccountManager.currentUser?.id {
                        await deviceManager.fetchUserDevices(for: userId)
                    }
                    
                    // Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„ÇâÈå≤Èü≥„ÇíÈñãÂßã
                    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                        audioRecorder.startRecording()
                    }
                }
            } else {
                // ‰∫àÊúü„Åó„Å™„ÅÑÁä∂ÊÖã
                alertMessage = "„Éá„Éê„Ç§„ÇπÈÄ£Êê∫„ÅÆÁä∂ÊÖã„Åå‰∏çÊòé„Åß„Åô"
                showAlert = true
            }
        }
    }
    
    // „Ç∑„É≥„Éó„É´„Å™‰∏ÄÊã¨„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàNetworkManager„ÇíÁõ¥Êé•‰ΩøÁî®Ôºâ- ÈÄêÊ¨°ÂÆüË°åÁâà
    private func manualBatchUpload() {
        // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂØæË±°„ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæóÔºàÈå≤Èü≥Â§±Êïó„Éï„Ç°„Ç§„É´„ÇíÈô§Â§ñÔºâ
        let recordingsToUpload = audioRecorder.recordings.filter { !$0.isRecordingFailed && $0.canUpload }
        
        guard !recordingsToUpload.isEmpty else {
            alertMessage = "„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂØæË±°„ÅÆ„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ"
            showAlert = true
            return
        }
        
        print("üì§ ‰∏ÄÊã¨„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã: \(recordingsToUpload.count)‰ª∂")
        
        // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰ª∂Êï∞„ÇíË®≠ÂÆö
        uploadingTotalCount = recordingsToUpload.count
        uploadingCurrentIndex = 0
        
        // ÊúÄÂàù„ÅÆ„Éï„Ç°„Ç§„É´„Åã„Çâ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÇíÈñãÂßã„Åô„Çã
        uploadSequentially(recordings: recordingsToUpload)
    }
    
    // ÂÜçÂ∏∞ÁöÑ„Å´„Éï„Ç°„Ç§„É´„Çí1„Å§„Åö„Å§„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åô„ÇãÈñ¢Êï∞
    private func uploadSequentially(recordings: [RecordingModel]) {
        // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åô„Çã„É™„Çπ„Éà„ÅåÁ©∫„Å´„Å™„Å£„Åü„ÇâÂá¶ÁêÜ„ÇíÁµÇ‰∫Ü
        guard let recording = recordings.first else {
            print("‚úÖ ÂÖ®„Å¶„ÅÆ‰∏ÄÊã¨„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ")
            DispatchQueue.main.async {
                self.alertMessage = "„Åô„Åπ„Å¶„ÅÆ‰∏ÄÊã¨„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ"
                self.showAlert = true
                // „Ç´„Ç¶„É≥„Çø„Éº„Çí„É™„Çª„ÉÉ„Éà
                self.uploadingTotalCount = 0
                self.uploadingCurrentIndex = 0
            }
            return
        }
        
        // „É™„Çπ„Éà„ÅÆÊÆã„Çä„ÇíÊ¨°„ÅÆÂá¶ÁêÜ„ÅÆ„Åü„ÇÅ„Å´Ê∫ñÂÇô
        var remainingRecordings = recordings
        remainingRecordings.removeFirst()
        
        // ÁèæÂú®„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁï™Âè∑„ÇíÊõ¥Êñ∞
        uploadingCurrentIndex = uploadingTotalCount - recordings.count + 1
        
        print("üì§ „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠: \(recording.fileName) (\(uploadingCurrentIndex)/\(uploadingTotalCount))")
        
        // 1„Å§„ÅÆ„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
        networkManager.uploadRecording(recording) { success in
            if success {
                print("‚úÖ ‰∏ÄÊã¨„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊàêÂäü: \(recording.fileName)")
                
                // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÊàêÂäü„Åó„Åü„ÅÆ„Åß„ÄÅ„Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§„Åô„Çã
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    print("üóëÔ∏è ÈÄÅ‰ø°Ê∏à„Åø„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§„Åó„Åæ„Åô:\(recording.fileName)")
                    self.audioRecorder.deleteRecording(recording)
                }
            } else {
                print("‚ùå ‰∏ÄÊã¨„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂ§±Êïó: \(recording.fileName)")
            }
            
            // ÊàêÂäü„ÉªÂ§±Êïó„Å´„Åã„Åã„Çè„Çâ„Åö„ÄÅÊ¨°„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÇíÂÜçÂ∏∞ÁöÑ„Å´Âëº„Å≥Âá∫„Åô
            self.uploadSequentially(recordings: remainingRecordings)
        }
    }
}

// MARK: - Èå≤Èü≥„Éï„Ç°„Ç§„É´Ë°å„ÅÆ„Éì„É•„Éº
struct RecordingRowView: View {
    @ObservedObject var recording: RecordingModel
    let isSelected: Bool
    let onSelect: () -> Void
    let onDelete: (RecordingModel) -> Void
    @EnvironmentObject var deviceManager: DeviceManager
    
    // „Éï„Ç°„Ç§„É´Âêç„Åã„ÇâÊó•‰ªò„Å®ÊôÇÈñì„Çπ„É≠„ÉÉ„Éà„ÇíÊäΩÂá∫
    private var recordingDateTime: String {
        // „Éï„Ç°„Ç§„É´ÂêçÂΩ¢Âºè: "2025-08-19/22-00.wav"
        let components = recording.fileName.split(separator: "/")
        guard components.count == 2 else { return recording.fileName }
        
        let dateString = String(components[0])
        let timeComponent = String(components[1]).replacingOccurrences(of: ".wav", with: "")
        
        // Êó•‰ªò„Çí„Éë„Éº„Çπ
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        dateFormatter.timeZone = deviceManager.selectedDeviceTimezone
        
        guard let date = dateFormatter.date(from: dateString) else {
            return recording.fileName
        }
        
        // Êó•Êú¨Ë™ûÂΩ¢Âºè„ÅßÊó•‰ªò„ÇíË°®Á§∫
        let displayFormatter = DateFormatter()
        displayFormatter.dateFormat = "yyyyÂπ¥MÊúàdÊó•"
        displayFormatter.locale = Locale(identifier: "ja_JP")
        displayFormatter.timeZone = deviceManager.selectedDeviceTimezone
        
        // ÊôÇÈñì„Çπ„É≠„ÉÉ„Éà„ÇíÊï¥ÂΩ¢ (22-00 -> 22:00)
        let timeFormatted = timeComponent.replacingOccurrences(of: "-", with: ":")
        
        return "\(displayFormatter.string(from: date)) \(timeFormatted)"
    }
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                HStack {
                    // „Çè„Åã„Çä„ÇÑ„Åô„ÅÑÊó•ÊôÇË°®Á§∫
                    Text(recordingDateTime)
                        .font(.subheadline)
                        .fontWeight(.medium)
                    
                    Spacer()
                    
                    // Èå≤Èü≥Â§±Êïó„Éï„Ç°„Ç§„É´„ÅÆÂ†¥Âêà„ÅØ„ÄåÈå≤Èü≥Â§±Êïó„Äç„ÇíË°®Á§∫
                    if recording.isRecordingFailed {
                        Text("Èå≤Èü≥Â§±Êïó")
                            .font(.caption)
                            .fontWeight(.bold)
                            .foregroundColor(Color.safeColor("ErrorColor"))
                    } else {
                        Text(recording.fileSizeFormatted)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                
                // Èå≤Èü≥Â§±Êïó„Éï„Ç°„Ç§„É´„ÅÆÂ†¥Âêà„ÅÆË™¨Êòé
                if recording.isRecordingFailed {
                    HStack {
                        Image(systemName: "xmark.circle.fill")
                            .font(.caption)
                            .foregroundColor(Color.safeColor("ErrorColor"))
                        
                        Text("Èü≥Â£∞„Éá„Éº„Çø„ÅÆÈå≤Èü≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éï„Ç°„Ç§„É´„ÅØËá™ÂãïÁöÑ„Å´ÂâäÈô§„Åï„Çå„Åæ„Åô„ÄÇ")
                            .font(.caption)
                            .foregroundColor(Color.safeColor("ErrorColor"))
                        
                        Spacer()
                    }
                }
                
                // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂ§±ÊïóÊôÇ„ÅÆ„Åø„Ç®„É©„ÉºÊÉÖÂ†±„ÇíË°®Á§∫ÔºàÈå≤Èü≥Â§±Êïó„Éï„Ç°„Ç§„É´‰ª•Â§ñÔºâ
                if !recording.isRecordingFailed && recording.uploadAttempts > 0 && !recording.isUploaded {
                    HStack {
                        Image(systemName: "exclamationmark.triangle.fill")
                            .font(.caption)
                            .foregroundColor(Color.safeColor("WarningColor"))
                        
                        Text("„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂ§±Êïó (Ë©¶Ë°å: \(recording.uploadAttempts)/3)")
                            .font(.caption)
                            .foregroundColor(Color.safeColor("WarningColor"))
                        
                        Spacer()
                    }
                    
                    // Ë©≥Á¥∞„Å™„Ç®„É©„ÉºÊÉÖÂ†±
                    if let error = recording.lastUploadError {
                        Text(error)
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .lineLimit(2)
                    }
                }
            }
            
            Spacer()
            
            HStack(spacing: 8) {
                // ÊúÄÂ§ßË©¶Ë°åÂõûÊï∞„Å´ÈÅî„Åó„ÅüÂ†¥Âêà„ÅØ„É™„Çª„ÉÉ„Éà„Éú„Çø„É≥„ÇíË°®Á§∫
                if recording.uploadAttempts >= 3 {
                    Button(action: {
                        recording.resetUploadStatus()
                        print("üîÑ „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁä∂ÊÖã„É™„Çª„ÉÉ„Éà: \(recording.fileName)")
                    }) {
                        Image(systemName: "arrow.clockwise")
                            .foregroundColor(Color.safeColor("WarningColor"))
                    }
                }
                
                // ÂâäÈô§„Éú„Çø„É≥
                Button(action: { onDelete(recording) }) {
                    Image(systemName: "trash")
                        .foregroundColor(Color.safeColor("RecordingActive"))
                }
            }
        }
        .padding()
        .background(isSelected ? Color.blue.opacity(0.1) : Color(.systemGray6))
        .cornerRadius(8)
        .onTapGesture {
            onSelect()
        }
    }
}

// Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Çø„Éº
extension DateFormatter {
    static func display(for deviceManager: DeviceManager) -> DateFormatter {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .medium
        formatter.locale = Locale.current
        // „Éá„Éê„Ç§„Çπ„ÅÆ„Çø„Ç§„É†„Çæ„Éº„É≥„Çí‰ΩøÁî®
        formatter.timeZone = deviceManager.selectedDeviceTimezone
        return formatter
    }
}

#Preview {
    let deviceManager = DeviceManager()
    let userAccountManager = UserAccountManager(deviceManager: deviceManager)
    return RecordingView(
        audioRecorder: AudioRecorder(),
        networkManager: NetworkManager(
            userAccountManager: userAccountManager,
            deviceManager: deviceManager
        )
    )
}
//
//  Color+AppColors.swift
//  ios_watchme_v9
//
//  Created by Claude on 2025/08/18.
//  カラーの一元管理のための拡張ファイル
//

import SwiftUI

extension Color {
    // MARK: - Chart Colors
    // Vibe Graph Colors
    static let graphLineColor = Color("GraphLineColor")  // メインのグラフ線の色
    static let vibeChangeIndicatorColor = Color("VibeChangeIndicatorColor")  // 注目ポイントの色
    static let scorePositiveColor = Color("ScorePositiveColor")  // スコアが良い時の色
    static let scoreNormalColor = Color("ScoreNormalColor")  // スコアが普通な時の色  
    static let scoreNeutralColor = Color("ScoreNeutralColor")  // スコアが中間の時の色
    static let scoreNegativeColor = Color("ScoreNegativeColor")  // スコアが低い時の色
    static let scoreVeryNegativeColor = Color("ScoreVeryNegativeColor")  // スコアが非常に低い時の色
    static let chartBackgroundColor = Color("ChartBackgroundColor")  // グラフの背景色
    static let zeroLineColor = Color("ZeroLineColor")  // ゼロ基準線の色
    
    // Behavior Graph Colors (partially auto-generated)
    // behaviorBackgroundSecondary is now auto-generated from Assets.xcassets
    // メダルカラーもAssets.xcassetsで定義済み（Xcode自動生成のため、ここでは定義しない）
    // static let behaviorGoldMedal = Color("BehaviorGoldMedal")
    // static let behaviorSilverMedal = Color("BehaviorSilverMedal")
    // static let behaviorBronzeMedal = Color("BehaviorBronzeMedal")
    
    // MARK: - UI Colors
    
    static let primaryActionColor = Color("PrimaryActionColor")  // 主要アクションボタンの色
    static let secondaryActionColor = Color("SecondaryActionColor")  // 副次的アクションボタンの色
    // Note: warningColor, successColor, errorColor are auto-generated by Xcode
    static let infoColor = Color("InfoColor")  // 情報の色
    static let appAccentColor = Color("AppAccentColor")  // アプリ全体のアクセントカラー（紫）
    
    // MARK: - Background Colors
    // Note: primaryBackground, secondaryBackground, tertiaryBackground are auto-generated by Xcode

    // MARK: - Text Colors
    // Note: primaryText, secondaryText, tertiaryText, placeholderText are auto-generated by Xcode

    // MARK: - Recording & Status Colors
    // Note: recordingActive, uploadActive, statusNormal, recordingInactive are auto-generated by Xcode

    // MARK: - Border & Separator Colors
    // Note: borderMedium is auto-generated by Xcode
    static let separatorColor = Color("SeparatorColor")  // 区切り線

    // MARK: - Timeline Indicator Colors
    // Note: timelineActive is auto-generated by Xcode
    
    // MARK: - Fallback Colors
    
    static func fallbackColor(for name: String) -> Color {
        switch name {
        // Chart Colors
        case "GraphLineColor":
            return Color(red: 0.384, green: 0, blue: 1)  // 紫色
        case "VibeChangeIndicatorColor":
            return Color(red: 0.384, green: 0, blue: 1)  // 紫色
        case "ScorePositiveColor":
            return .green
        case "ScoreNormalColor":
            return .blue
        case "ScoreNeutralColor":
            return .gray
        case "ScoreNegativeColor":
            return .purple
        case "ScoreVeryNegativeColor":
            return .red
        case "ChartBackgroundColor":
            return Color(.systemGray6)
        case "ZeroLineColor":
            return Color.gray.opacity(0.5)
            
        // Behavior Graph Colors
        case "BehaviorTextPrimary":
            return Color(red: 0.102, green: 0.102, blue: 0.102)  // #1a1a1a（26/255）
        case "BehaviorTextSecondary":
            return Color(red: 0.4, green: 0.4, blue: 0.4)  // #666666相当
        case "BehaviorTextTertiary":
            return Color(red: 0.4, green: 0.4, blue: 0.4)  // #666666相当
        case "BehaviorBackgroundPrimary":
            return Color(red: 0.98, green: 0.98, blue: 0.98)  // #fafafa
        case "BehaviorBackgroundSecondary":
            return Color.gray.opacity(0.2)
        case "BehaviorGoldMedal":
            return Color(red: 1.0, green: 0.84, blue: 0.0)
        case "BehaviorSilverMedal":
            return Color(red: 0.75, green: 0.75, blue: 0.75)
        case "BehaviorBronzeMedal":
            return Color(red: 0.8, green: 0.5, blue: 0.2)
            
        // Emotion Colors
        case "EmotionJoy":
            return .yellow
        case "EmotionTrust":
            return .green
        case "EmotionFear":
            return .purple
        case "EmotionSurprise":
            return .cyan
        case "EmotionSadness":
            return .blue
        case "EmotionDisgust":
            return .brown
        case "EmotionAnger":
            return .red
        case "EmotionAnticipation":
            return .orange
            
        // UI Colors
        case "PrimaryActionColor":
            return .blue
        case "SecondaryActionColor":
            return .gray
        case "WarningColor":
            return .orange
        case "SuccessColor":
            return .green
        case "ErrorColor":
            return .red
        case "InfoColor":
            return .blue
        case "AppAccentColor":
            return Color.black  // 黒色（アプリのメインカラー）
            
        // Background Colors
        case "PrimaryBackground":
            return Color(.systemBackground)
        case "SecondaryBackground":
            return Color(.secondarySystemBackground)
        case "TertiaryBackground":
            return Color(.tertiarySystemBackground)
        case "CardBackground":
            return Color(.systemGray6)
            
        // Text Colors
        case "PrimaryText":
            return Color(.label)
        case "SecondaryText":
            return Color(.secondaryLabel)
        case "TertiaryText":
            return Color(.tertiaryLabel)
        case "PlaceholderText":
            return Color(.placeholderText)
            
        // Recording & Status Colors
        case "RecordingActive":
            return .red
        case "RecordingInactive":
            return .gray
        case "UploadActive":
            return .blue
        case "StatusNormal":
            return .green
            
        // Border & Separator Colors
        case "BorderLight":
            return Color.gray.opacity(0.2)
        case "BorderMedium":
            return Color.gray.opacity(0.5)
        case "SeparatorColor":
            return Color.gray.opacity(0.3)
            
        // Timeline Indicator Colors
        case "TimelineIndicator":
            return Color(red: 0.384, green: 0, blue: 1)  // 紫色（AppAccentColorと同じ）
        case "TimelineActive":
            return .cyan  // アクティブなタイムライン
            
        default:
            return .gray
        }
    }
    
    // MARK: - Safe Color Initializer
    
    static func safeColor(_ name: String) -> Color {
        // まずAssets.xcassetsから色を取得を試みる
        if UIColor(named: name) != nil {
            return Color(name)
        } else {
            // 定義されていない場合はフォールバックを使用
            print("⚠️ Color '\(name)' not found in Assets.xcassets. Using fallback color.")
            return fallbackColor(for: name)
        }
    }
}

// MARK: - Convenience Extensions

extension Color {
    // 現在使用されている直接定義色をマイグレーションするための便利メソッド
    
    static func vibeScoreColor(for score: Double) -> Color {
        switch score {
        case 60...:
            return safeColor("ScorePositiveColor")
        case 20..<60:
            return safeColor("ScoreNormalColor")
        case -20..<20:
            return safeColor("ScoreNeutralColor")
        case -60..<(-20):
            return safeColor("ScoreNegativeColor")
        default:
            return safeColor("ScoreVeryNegativeColor")
        }
    }
}